One of the challenges in the Closed Loop request system is that most of the Coin-like systems don't allow us to store any state (unlike Kiosk, where Kiosk is the state and a container for arbitrary data - eg Extensions).

- we want to have a state for applications such as allowlist / denylist
- to keep the implementation as generic as possible we need to eliminate the need for discovery
- every user action already requires `TokenPolicy` - we can utilize it for storage
- we don't want to have too many dynamic fields (while better collection types are still on the way, a dummy implementation is okay for the time being, however long term we'd want to replace them)

// Thoughts on Rules

- each rule can choose any storage type, hence we will always have uncertainty around "Config" type parameter
- because we want mutability and store large datasets, Config can't have "drop" constraint
- we need to preserve a way for the application admin to disable a rule without consuming the "Config"
- we have Rule per Action, so the key for storing configs must include both Rule and Action
- we want to protect TokenPolicy owners from potential malicious activity of Rule creators
- ...we must preserve single rule set for discoverability's sake - hence we shouldn't encourage anyone to write their own rules

// States for a Rule are (for action):

- enabled with configs
- disabled - can we re-enable it?
- removed

// Misc

- rule can't mutate its state without permission from Policy owner (eg Denylist)

---

Rules Design V2

- rules do not require config by default, a simple witness can be used
- some rules may require a config to exist;
- for that a `rule_config` API should be used:
    - config can be read by a Rule
    - config can only be mutated by the `TokenPolicyCap` owner
    - it's up to a rule to store configuration and manage it

---
